{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/operator/switchMap.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/switchMap.js","webpack:///./src/app/views/app-chats/app-chats.component.css","webpack:///./src/app/views/app-chats/app-chats.component.html","webpack:///./src/app/views/app-chats/app-chats.component.ts","webpack:///./src/app/views/app-chats/app-chats.module.ts","webpack:///./src/app/views/app-chats/app-chats.routing.ts","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.html","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.scss","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.ts","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.html","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.scss","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.ts","webpack:///./src/app/views/app-chats/chat.service.ts"],"names":[],"mappings":"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","file":"views-app-chats-app-chats-module.js","sourcesContent":["import { Observable } from 'rxjs';\nimport { switchMap } from '../../operator/switchMap';\nObservable.prototype.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","import { switchMap as higherOrderSwitchMap } from 'rxjs/operators';\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project) {\n    return higherOrderSwitchMap(project)(this);\n}\n//# sourceMappingURL=switchMap.js.map","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9hcHAtY2hhdHMuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card class=\\\"p-0\\\">\\n  <mat-sidenav-container class=\\\"chat-container\\\">\\n    <!-- Left sidebar -->\\n    <mat-sidenav class=\\\"chat-sidenav\\\" [opened]=\\\"isSidenavOpen\\\" mode=\\\"side\\\">\\n      <app-chat-left-sidenav></app-chat-left-sidenav>\\n    </mat-sidenav>\\n\\n    <!-- Right side -->\\n    <div class=\\\"chats-wrap\\\">\\n      <!-- Right side topbar -->\\n      <app-chat-contents [matSidenav]=\\\"sideNav\\\"></app-chat-contents>\\n\\n    </div>\\n  </mat-sidenav-container>\\n</mat-card>\\n\"","import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MediaChange, ObservableMedia } from '@angular/flex-layout';\nimport { MatSidenav, MatDialog } from '@angular/material';\nimport { ChatService } from './chat.service';\n\n@Component({\n  selector: 'app-chats',\n  templateUrl: './app-chats.component.html',\n  styleUrls: ['./app-chats.component.css']\n})\nexport class AppChatsComponent implements OnInit, OnDestroy {\n  isMobile;\n  screenSizeWatcher: Subscription;\n  isSidenavOpen: Boolean = true;\n  @ViewChild(MatSidenav) public sideNav: MatSidenav;\n\n  activeChatUser = {\n    name: 'Gevorg Spartak',\n    photo: 'assets/images/face-2.jpg',\n    isOnline: true,\n    lastMsg: 'Hello!'\n  };\n  user;\n\n\n  constructor(\n    private media: ObservableMedia, \n    public chatService: ChatService\n  ) {\n    // console.log(chatService.chats)\n    this.user = chatService.user\n  }\n\n  ngOnInit() {\n    this.chatSideBarInit();\n  }\n  ngOnDestroy() {\n    if (this.screenSizeWatcher) {\n      this.screenSizeWatcher.unsubscribe();\n    }\n  }\n  changeActiveUser(user) {\n    this.activeChatUser = user;\n  }\n  updateSidenav() {\n    var self = this;\n    setTimeout(() => {\n      self.isSidenavOpen = !self.isMobile;\n      self.sideNav.mode = self.isMobile ? 'over' : 'side';\n    });\n  }\n  chatSideBarInit() {\n    this.isMobile = this.media.isActive('xs') || this.media.isActive('sm');\n    this.updateSidenav();\n    this.screenSizeWatcher = this.media.subscribe((change: MediaChange) => {\n      this.isMobile = (change.mqAlias === 'xs') || (change.mqAlias === 'sm');\n      this.updateSidenav();\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport {\n  MatIconModule,\n  MatButtonModule,\n  MatSidenavModule,\n  MatMenuModule,\n  MatInputModule,\n  MatListModule,\n  MatToolbarModule,\n  MatCardModule\n } from '@angular/material';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SharedModule } from '../../shared/shared.module'\nimport { AppChatsComponent } from './app-chats.component';\nimport { ChatsRoutes } from './app-chats.routing';\nimport { ChatLeftSidenavComponent } from './chat-left-sidenav/chat-left-sidenav.component';\nimport { ChatContentsComponent } from './chat-contents/chat-contents.component';\nimport { ChatService } from './chat.service';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { SharedPipesModule } from 'app/shared/pipes/shared-pipes.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatSidenavModule,\n    MatMenuModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatListModule,\n    MatToolbarModule,\n    MatCardModule,\n    FlexLayoutModule,\n    PerfectScrollbarModule,\n    SharedPipesModule,\n    RouterModule.forChild(ChatsRoutes)\n  ],\n  declarations: [AppChatsComponent, ChatLeftSidenavComponent, ChatContentsComponent],\n  providers: [ ChatService ]\n})\nexport class AppChatsModule {}","import { Routes } from '@angular/router';\n\nimport { AppChatsComponent } from './app-chats.component';\n\nexport const ChatsRoutes: Routes = [\n  { path: '', component: AppChatsComponent, data: { title: 'Chat' } }\n];\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"chat-toolbar\\\">\\n    <!-- sidebar toggle button -->\\n    <button \\n    mat-icon-button\\n    [style.alignSelf]=\\\"'center'\\\"\\n    class=\\\"mr-1\\\" \\n    (click)=\\\"matSidenav.toggle()\\\"><mat-icon>short_text</mat-icon>\\n    </button>\\n    \\n    <!-- Selected active user -->\\n    <div \\n      class=\\\"active-chat-user\\\" \\n      fxLayout=\\\"row\\\" \\n      fxLayoutAlign=\\\"start center\\\"\\n      *ngIf=\\\"activeContact.id\\\"\\n    >\\n      <a \\n        [ngClass]=\\\"{online: activeContact.status === 'online'}\\\" \\n        class=\\\"toolbar-avatar mr-1\\\"\\n      >\\n        <img [src]=\\\"activeContact.avatar\\\" alt=\\\"\\\">\\n        <span class=\\\"status-dot\\\"></span>\\n      </a>\\n      <div fxLayout=\\\"column\\\">\\n        <h6 class=\\\"m-0 font-normal fz-1\\\">{{activeContact.name}}</h6>\\n      </div>\\n    </div>\\n\\n    <!-- Right side top menu -->\\n    <span fxFlex></span>\\n    <button \\n    [style.alignSelf]=\\\"'center'\\\" \\n    mat-icon-button \\n    [matMenuTriggerFor]=\\\"toolbarDDMenu\\\" \\n    class=\\\"topbar-button-right hidden-on-open\\\">\\n        <mat-icon>more_vert</mat-icon>\\n    </button>\\n    <mat-menu #toolbarDDMenu=\\\"matMenu\\\">\\n        <button mat-menu-item><mat-icon>account_circle</mat-icon>Contact info</button>\\n        <button mat-menu-item><mat-icon>volume_mute</mat-icon>Mute</button>\\n        <button mat-menu-item><mat-icon>delete</mat-icon>Clear chat</button>\\n    </mat-menu>\\n</mat-toolbar>\\n\\n<div *ngIf=\\\"chatCollection && !chatService.collectionLoading\\\">\\n    <!-- Main chat body -->\\n    <div class=\\\"conversations-hold\\\" [perfectScrollbar]>\\n\\n      <!-- single chat item -->\\n      <div class=\\\"single-conversation\\\" \\n        fxLayout=\\\"row\\\" \\n        *ngFor=\\\"let chat of chatCollection?.chats\\\"\\n        [ngClass]=\\\"{sender: chat.contactId === activeContact.id, me: chat.contactId !== activeContact.id}\\\"\\n      >\\n\\n        <a \\n          *ngIf=\\\"chat.contactId !== activeContact.id\\\" \\n          href=\\\"\\\" \\n          class=\\\"toolbar-avatar\\\"\\n          [ngClass]=\\\"{online: user.status === 'online'}\\\"\\n        >\\n          <img [src]=\\\"user?.avatar\\\" [alt]=\\\"user?.name\\\">\\n          <span class=\\\"status-dot\\\"></span>\\n        </a>\\n\\n        <a \\n          *ngIf=\\\"chat.contactId === activeContact.id\\\" \\n          href=\\\"\\\" \\n          class=\\\"toolbar-avatar\\\"\\n          [ngClass]=\\\"{online: activeContact.status === 'online'}\\\"\\n        >\\n          <img [src]=\\\"activeContact?.avatar\\\" [alt]=\\\"activeContact?.name\\\">\\n          <span class=\\\"status-dot\\\"></span>\\n        </a>\\n\\n        <div>\\n          <h5 *ngIf=\\\"chat.contactId === activeContact.id\\\" class=\\\"chat-username text-muted\\\">{{activeContact?.name}}</h5>\\n          <h5 *ngIf=\\\"chat.contactId !== activeContact.id\\\" class=\\\"chat-username text-muted\\\">{{user?.name}}</h5>\\n\\n          <div class=\\\"conversation-msg\\\">\\n            {{chat.text}}\\n          </div>\\n          <p class=\\\"chat-date text-muted\\\">{{chat.time | relativeTime}}</p>\\n        </div>\\n      </div>\\n\\n    </div>\\n    <mat-divider></mat-divider>\\n\\n    <!-- Input box and send button -->\\n    <div class=\\\"chat-input-actions\\\">\\n      <form \\n        #msgForm=\\\"ngForm\\\" \\n        class=\\\"inputForm\\\" \\n        (ngSubmit)=\\\"sendMessage($event)\\\" \\n        (keydown.enter)=\\\"sendMessage($event)\\\"\\n        fxLayout=\\\"row\\\"\\n      >\\n        <mat-form-field class=\\\"full-width mr-1\\\">\\n          <textarea\\n          matInput\\n          required\\n          #msgInput\\n          ngModel\\n          placeholder=\\\"Type your message\\\"\\n          name=\\\"message\\\"\\n          class=\\\"inputText\\\"\\n          value=\\\"\\\"></textarea>\\n        </mat-form-field>\\n        <button mat-fab color=\\\"primary\\\" type=\\\"submit\\\"><mat-icon>send</mat-icon></button>\\n      </form>\\n    </div>\\n</div>\\n\\n<div class=\\\"chat-intro\\\" *ngIf=\\\"chatService.collectionLoading\\\">\\n  <div class=\\\"chat-loader\\\">\\n    <div class=\\\"spinner\\\">\\n      <div class=\\\"double-bounce1 mat-bg-accent\\\"></div>\\n      <div class=\\\"double-bounce2 mat-bg-primary\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"chat-intro\\\" \\n*ngIf=\\\"!chatCollection && !chatService.collectionLoading\\\" \\nfxLayout=\\\"column\\\" \\nfxLayoutAlign=\\\"center center\\\">\\n  <mat-card \\n  class=\\\"text-center\\\"\\n  fxLayout=\\\"row\\\"\\n  fxLayoutAlign=\\\"center center\\\"\\n  [ngStyle]=\\\"{height: '220px', width: '220px', borderRadius: '50%'}\\\">\\n    <mat-icon \\n    color=\\\"primary\\\"\\n    class=\\\"text-60\\\" \\n    [ngStyle]=\\\"{height: '60px', width: '60px'}\\\">chat</mat-icon>\\n  </mat-card>\\n  <h6>Select a contact!</h6>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9jaGF0LWNvbnRlbnRzL2NoYXQtY29udGVudHMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ViewChild, ViewChildren, Input, OnDestroy, ChangeDetectorRef } from \"@angular/core\";\nimport { PerfectScrollbarDirective } from \"ngx-perfect-scrollbar\";\nimport { ChatService, ChatCollection, User, Chat } from \"../chat.service\";\nimport { NgForm } from \"@angular/forms\";\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: \"app-chat-contents\",\n  templateUrl: \"./chat-contents.component.html\",\n  styleUrls: [\"./chat-contents.component.scss\"]\n})\nexport class ChatContentsComponent implements OnInit, OnDestroy {\n  public user: User = new User();\n  public activeContact: User = new User();\n  public chatCollection: ChatCollection;\n\n  userUpdateSub: Subscription;\n  chatUpdateSub: Subscription;\n  chatSelectSub: Subscription;\n\n  @Input('matSidenav') matSidenav;\n  @ViewChild(PerfectScrollbarDirective) psContainer: PerfectScrollbarDirective;\n\n  @ViewChildren(\"msgInput\") msgInput;\n  @ViewChild(\"msgForm\") msgForm: NgForm;\n\n  constructor(\n    public chatService: ChatService,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    // Listen for user update\n    this.userUpdateSub = this.chatService.onUserUpdated.subscribe(user => {\n      this.user = user;\n      this.cdr.markForCheck();\n    });\n\n    // Listen for contact change\n    this.chatSelectSub = this.chatService.onChatSelected.subscribe(res => {\n      if (res) {\n        this.chatCollection = res.chatCollection;\n        this.activeContact = res.contact;\n        this.initMsgForm();\n        this.cdr.markForCheck();\n      }\n    });\n\n    // Listen for chat update\n    this.chatUpdateSub = this.chatService.onChatsUpdated.subscribe(chat => {\n      this.chatCollection.chats.push(chat);\n      this.scrollToBottom();\n\n      this.cdr.markForCheck();\n    })\n  }\n  \n  ngOnDestroy() {\n    if( this.userUpdateSub ) this.userUpdateSub.unsubscribe();\n    if( this.chatSelectSub ) this.chatSelectSub.unsubscribe();\n    if( this.chatUpdateSub ) this.chatUpdateSub.unsubscribe();\n  }\n\n  sendMessage(e) {\n    // console.log(this.msgForm.form.value.message)\n    if(!this.msgForm.form.value.message || !this.msgForm.form.value.message.trim().length) {\n      return;\n    }\n    const chat: Chat = {\n      contactId: this.chatService.user.id,\n      text: this.msgForm.form.value.message,\n      time: new Date().toISOString()\n    };\n\n    this.chatCollection.chats.push(chat);\n    this.chatService\n      .updateChats(this.chatCollection.id, [...this.chatCollection.chats])\n      .subscribe(res => {\n        this.initMsgForm();\n        this.cdr.markForCheck();\n      });\n    \n    // Only for demo purpose\n    this.chatService.autoReply({\n      contactId: this.activeContact.id,\n      text: `Hi, I\\'m ${this.activeContact.name}. Your imaginary friend.`,\n      time: new Date().toISOString()\n    })\n    \n  }\n\n  initMsgForm() {\n    setTimeout(() => {\n      this.msgForm.reset();\n      this.msgInput.first.nativeElement.focus();\n      this.scrollToBottom();\n    });\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      this.psContainer.update();\n      this.psContainer.scrollToBottom(0, 400);\n    })\n  }\n}\n","module.exports = \"<!-- Left side topbar -->\\n<mat-toolbar color=\\\"primary\\\" class=\\\"chat-sidebar-toolbar\\\">\\n  <a href=\\\"\\\" class=\\\"toolbar-avatar online\\\">\\n    <img [src]=\\\"currentUser.avatar\\\" alt=\\\"\\\">\\n    <span class=\\\"status-dot\\\"></span>\\n  </a>\\n  <h6 class=\\\"m-0 pl-1 font-normal fz-1\\\">{{currentUser.name}}</h6>\\n</mat-toolbar>\\n<div [perfectScrollbar] class=\\\"chat-sidebar-scroll\\\">\\n  <!-- Left side contact list -->\\n  <mat-nav-list class=\\\"inbox-nav-list\\\" role=\\\"list\\\">\\n    <mat-list-item\\n    *ngFor=\\\"let info of currentUser?.chatInfo\\\"\\n    (click)=\\\"getChatByContact(info.contactId)\\\">\\n      <a \\n      mat-list-avatar \\n      [ngClass]=\\\"{online: (contacts | getValueByKey:info.contactId:'status') === 'online'}\\\"\\n      class=\\\"toolbar-avatar\\\">\\n        <img [src]=\\\"contacts | getValueByKey:info.contactId:'avatar'\\\" alt=\\\"\\\">\\n        <span class=\\\"status-dot\\\"></span>\\n      </a>\\n      <h6 matLine>{{info.contactName}}</h6>\\n      <p matLine class=\\\"text-muted\\\">{{info.lastChatTime  | date}}</p>\\n    </mat-list-item>\\n    \\n  </mat-nav-list>\\n  <mat-divider></mat-divider>\\n  <mat-nav-list class=\\\"inbox-nav-list\\\" role=\\\"list\\\">\\n    <mat-list-item\\n    *ngFor=\\\"let contact of contacts\\\"\\n    (click)=\\\"getChatByContact(contact.id)\\\">\\n      <a \\n      mat-list-avatar \\n      [ngClass]=\\\"{online: contact.status === 'online'}\\\"\\n      class=\\\"toolbar-avatar\\\">\\n        <img [src]=\\\"contact.avatar\\\" alt=\\\"\\\">\\n        <span class=\\\"status-dot\\\"></span>\\n      </a>\\n      <h6 matLine>{{contact.name}}</h6>\\n      <!-- <p matLine class=\\\"text-muted\\\">{{contact.lastChatTime  | date}}</p> -->\\n    </mat-list-item>\\n    \\n  </mat-nav-list>\\n</div>\\n  \"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9jaGF0LWxlZnQtc2lkZW5hdi9jaGF0LWxlZnQtc2lkZW5hdi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectorRef } from \"@angular/core\";\nimport { ChatService, User } from \"../chat.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-chat-left-sidenav\",\n  templateUrl: \"./chat-left-sidenav.component.html\",\n  styleUrls: [\"./chat-left-sidenav.component.scss\"]\n})\nexport class ChatLeftSidenavComponent implements OnInit {\n  userUpdateSub: Subscription;\n  loadDataSub: Subscription;\n  \n  isSidenavOpen = true;\n\n  currentUser: User = new User();\n  contacts: any[];\n\n  constructor(\n    private chatService: ChatService,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    // this.chatService.onChatsUpdated\n    //   .subscribe(updatedChats => {\n    //     this.chats = updatedChats;\n    //   });\n\n    this.userUpdateSub = this.chatService.onUserUpdated\n      .subscribe(updatedUser => {\n        this.currentUser = updatedUser;\n      });\n\n    this.loadDataSub = this.chatService.loadChatData()\n      .subscribe(res => {\n        this.currentUser = this.chatService.user;\n        // this.chats = this.chatService.chats;\n        this.contacts = this.chatService.contacts;\n\n        this.cdr.markForCheck();\n      });\n  }\n  ngOnDestroy() {\n    if( this.userUpdateSub ) this.userUpdateSub.unsubscribe();\n    if( this.loadDataSub ) this.loadDataSub.unsubscribe();\n  }\n\n  getChatByContact(contactId) { \n    this.chatService.getChatByContact(contactId)\n      .subscribe(res => {\n        // console.log('from sub',res);\n      }, err => {\n        console.log(err)\n      })\n  }\n  \n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, BehaviorSubject, Subject, of, combineLatest } from \"rxjs\";\nimport { map, switchMap } from \"rxjs/operators\";\n\nimport 'rxjs/add/operator/switchMap';\n\nexport interface Chat {\n  text: string;\n  time: Date | string;\n  contactId: User[\"id\"];\n}\n\nexport interface ChatCollection {\n  id: string;\n  chats: Chat[];\n}\n\nexport interface UserChatInfo {\n  chatId: ChatCollection[\"id\"];\n  contactId: User[\"id\"];\n  contactName: User[\"name\"];\n  unread: number;\n  lastChatTime: Date | string;\n}\n\nexport class User {\n  id: string;\n  avatar: string;\n  name: string;\n  status: string;\n  chatInfo?: UserChatInfo[];\n}\n\n@Injectable()\nexport class ChatService {\n  public contacts: User[];\n  public chats: ChatCollection[];\n  public user: User;\n  public collectionLoading: boolean;\n\n  onContactSelected = new BehaviorSubject<any>(null);\n  onUserUpdated = new Subject<User>();\n\n  onChatSelected = new BehaviorSubject<any>(null);\n  onChatsUpdated = new Subject<any>();\n\n  constructor(private http: HttpClient) {\n    // console.log('from service');\n    // this.loadChatData()\n  }\n\n  loadChatData(): Observable<any> {\n    return combineLatest(\n      this.getAllContacts(),\n      this.getAllChats(),\n      this.getCurrentUser(),\n      (contacts, chats, user) => {\n        this.contacts = contacts;\n        this.chats = chats;\n        this.user = user;\n        // console.log('next.willCall')\n        this.onUserUpdated.next(user);\n        // console.log('next.called')\n        // console.log(\n        //   \"contacts:\",\n        //   contacts,\n        //   \"\\n chats:\",\n        //   chats,\n        //   \"\\n currUser:\",\n        //   user\n        // );\n      }\n    );\n  }\n  public getChatByContact(contactId): Observable<ChatCollection> {\n    let chatInfo = this.user.chatInfo.find(chat => chat.contactId === contactId);\n    this.collectionLoading = true;\n\n    if (!chatInfo) {\n      return this.createChatCollection(contactId)\n        .switchMap(chatColl => {\n          return this.getChatByContact(contactId)\n        });\n    }\n\n    return this.getAllChats()\n      .switchMap(chats => {\n        let chatCollection = chats.find(chat => chat.id === chatInfo.chatId);\n        let contact = this.contacts.find(\n          contact => contact.id === contactId\n        );\n\n        this.onChatSelected.next({\n          chatCollection: chatCollection,\n          contact: contact\n        });\n        this.collectionLoading = false;\n        return of(chatCollection);\n      });\n  }\n\n  createChatCollection(contactId) {\n\n    let contact = this.contacts.find(contact => contact.id === contactId);\n    const chatId = (Math.random() * 1000000000).toString();\n\n    const chatCollection: ChatCollection = {\n      id: chatId,\n      chats: []\n    };\n\n    let chatInfo = {\n      chatId: chatId,\n      lastChatTime: new Date(),\n      contactId: contact.id,\n      contactName: contact.name,\n      unread: null\n    };\n\n    return this.http\n      .post('api/chat-collections', {...chatCollection})\n      .switchMap(updatedChatCollection => {\n\n        this.user.chatInfo.push(chatInfo);\n        return this.updateUser(this.user)\n          .pipe(switchMap((res) => {\n\n            return this.getCurrentUser()\n              .pipe(map(user => {\n                this.user = user;\n                // console.log(user)\n                this.onUserUpdated.next(user)\n              }))\n          }));\n\n      });\n  }\n\n  getAllContacts(): Observable<User[]> {\n    return this.http.get<User[]>('api/contacts');\n  }\n  getAllChats(): Observable<ChatCollection[]> {\n    return this.http.get<ChatCollection[]>('api/chat-collections');\n  }\n  getCurrentUser(): Observable<User> {\n    return this.http.get<User>('api/chat-user')\n      .pipe(map(res => res[0]));\n  }\n  updateUser(user: User): Observable<User> {\n    return this.http.put<User>(`api/chat-user/${user.id}`, {...user})\n  }\n  updateChats(chatId: string, chats:Chat[]): Observable<ChatCollection> {\n    const chatCollection: ChatCollection = {\n      id: chatId,\n      chats: chats\n    }\n    return this.http.put<ChatCollection>('api/chat-collections', chatCollection)\n  }\n\n  autoReply(chat) {\n    setTimeout(() => {\n      this.onChatsUpdated.next(chat)\n    }, 1500);\n  }\n  \n}\n"],"sourceRoot":""}